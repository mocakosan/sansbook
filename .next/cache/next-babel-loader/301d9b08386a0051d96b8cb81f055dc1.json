{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { addCommnet } from \"../reducers/post\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${id}/comment\", data);\n}\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","axios","addCommnet","addPostAPI","data","post","addPost","action","type","ADD_POST_SUCCESS","result","err","ADD_POST_FAILURE","response","addCommentAPI","addComment","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","watchAddPost","ADD_POST_REQUEST","watchAddComment","ADD_COMMENT_REQUEST","postSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { addCommnet } from \"../reducers/post\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${id}/comment\", data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,SAAS,EACTC,UAAU,EACVC,IAAI,EACJC,GAAG,EACHC,KAAK,QACA,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA;AACA;;AAEA;AACA,SAASC,UAAUA,CAACC,IAAI,EAAE;EACxB,OAAOH,KAAK,CAACI,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUE,OAAOA,CAACC,MAAM,EAAE;EACxB,IAAI;IACF;IACA,MAAMP,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACR;MACAS,IAAI,EAAEC,gBAAgB;MACtBL,IAAI,EAAEM,MAAM,CAACN;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMZ,GAAG,CAAC;MACRS,IAAI,EAAEI,gBAAgB;MACtBR,IAAI,EAAEO,GAAG,CAACE,QAAQ,CAACT;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASU,aAAaA,CAACV,IAAI,EAAE;EAC3B,OAAOH,KAAK,CAACI,IAAI,CAAC,yBAAyB,EAAED,IAAI,CAAC;AACpD;AAEA,UAAUW,UAAUA,CAACR,MAAM,EAAE;EAC3B,IAAI;IACF;IACA,MAAMP,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACR;MACAS,IAAI,EAAEQ,mBAAmB;MACzBZ,IAAI,EAAEM,MAAM,CAACN;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMZ,GAAG,CAAC;MACRS,IAAI,EAAES,mBAAmB;MACzBb,IAAI,EAAEO,GAAG,CAACE,QAAQ,CAACT;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUc,YAAYA,CAAA,EAAG;EACvB,MAAMrB,UAAU,CAACsB,gBAAgB,EAAEb,OAAO,CAAC;AAC7C;AACA,UAAUc,eAAeA,CAAA,EAAG;EAC1B,MAAMvB,UAAU,CAACwB,mBAAmB,EAAEN,UAAU,CAAC;AACnD;AACA;AACA;AACA;AACA;;AAEA,eAAe,UAAUO,QAAQA,CAAA,EAAG;EAClC,MAAM5B,GAAG,CAAC,CAACC,IAAI,CAACuB,YAAY,CAAC,EAAEvB,IAAI,CAACyB,eAAe,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}
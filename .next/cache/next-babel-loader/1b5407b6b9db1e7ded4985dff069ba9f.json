{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LoadPost\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    //const result = yield fork(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","ADD_POST_TO_ME","shortId","loadPostsAPI","data","get","loadPosts","action","type","LOAD_POSTS_SUCCESS","generateDummyPost","err","console","error","LOAD_POSTS_FAILURE","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","throttle","LOAD_POSTS_REQUEST","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LoadPost\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield fork(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport AppLayout from \"../components/AppLayout\";\nimport Head from \"next/head\";\nimport NicknameEditForm from \"../components/NicknameEditForm\";\nimport FollowList from \"../components/FollowList\";\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport useSWR from \"swr\";\nimport axios from \"axios\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from \"redux-saga\";\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\nconst Profile = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: followingsLimit,\n    1: setFollowingsLimit\n  } = useState(3);\n  const {\n    0: followersLimit,\n    1: setFollowersLimit\n  } = useState(3);\n  const {\n    data: followersData,\n    error: followerError\n  } = useSWR(`http://localhost:3001/user/followers?limit=${followersLimit}`, fetcher);\n  const {\n    data: followingsData,\n    error: followingError\n  } = useSWR(`http://localhost:3001/user/followings?limit=${followingsLimit}`, fetcher);\n\n  // useEffect(() => { //swr사용 안할시에\n  //   dispatch({\n  //     type: LOAD_FOLLOWINGS_REQUEST,\n  //   });\n  //   dispatch({\n  //     type: LOAD_FOLLOWERS_REQUEST,\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      Router.push(\"/\");\n    }\n  }, [me && me.id]);\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit(prev => prev + 3);\n  }, []);\n  if (!me) {\n    return \"내정보 로딩중\";\n  }\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return \"팔로잉/팔로워 로딩 중 에러가 발생했습니다.\";\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uB0B4\\uD504\\uB85C\\uD544 | Sansbook \")), __jsx(AppLayout, null, __jsx(NicknameEditForm, null), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC789\",\n    data: followingsData,\n    onClickMore: loadMoreFollowings,\n    loading: !followingError && !followingsData\n  }), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC6CC\",\n    data: followersData,\n    onClickMore: loadMoreFollowers,\n    loading: !followerError && !followersData\n  })));\n};\n\n//SSR : next전용 서버사이드 렌더링 = 사용\nexport const getServerSideProps = wrapper.getServerSideProps(store => async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n  if (context.req && cookie) {\n    //쿠키를 써서 요청을 보냈을떄만 잠시 보관해두었다가 쿠키 안써서 요청보낼떄는 서버에서 공유하고 있는 쿠키를 제거하는\n    axios.defaults.headers.Cookie = cookie; //잘못하면 내 뒤로 로그인하는 사람이 내쿠키를 공유해서 내정보로 로그인하는 현상이 일어나서 해두는 조치\n  }\n\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n  return {\n    props: {}\n  };\n});\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}
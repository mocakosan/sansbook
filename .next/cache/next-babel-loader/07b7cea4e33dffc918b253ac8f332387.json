{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    //const result = yield fork(logInAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield fork(logOutAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield fork(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut, fork(watchAddPost))]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","axios","logInAPI","data","post","logIn","action","type","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/index.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    //const result = yield fork(logInAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield fork(logOutAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield fork(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut, fork(watchAddPost))]);\n}\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,SAAS,EACTC,UAAU,EACVC,IAAI,EACJC,GAAG,EACHC,KAAK,QACA,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAEA;AACA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACtB,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACvC;AAEA,UAAUE,KAAKA,CAACC,MAAM,EAAE;EACtB,IAAI;IACF,MAAMN,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACR;MACAQ,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEK,MAAM,CAACL;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMV,GAAG,CAAC;MACRQ,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASQ,SAASA,CAAA,EAAG;EACnB,OAAOV,KAAK,CAACG,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAMA,CAAA,EAAG;EACjB,IAAI;IACF,MAAMJ,MAAM,GAAG,MAAMb,IAAI,CAACgB,SAAS,CAAC;IACpC,MAAMZ,GAAG,CAAC;MACR;MACAQ,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEK,MAAM,CAACL;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMV,GAAG,CAAC;MACRQ,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASU,UAAUA,CAACV,IAAI,EAAE;EACxB,OAAOF,KAAK,CAACG,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUW,OAAOA,CAACR,MAAM,EAAE;EACxB,IAAI;IACF,MAAME,MAAM,GAAG,MAAMb,IAAI,CAACkB,UAAU,EAAEP,MAAM,CAACH,IAAI,CAAC;IAClD,MAAMJ,GAAG,CAAC;MACR;MACAQ,IAAI,EAAE,kBAAkB;MACxBJ,IAAI,EAAEK,MAAM,CAACL;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMV,GAAG,CAAC;MACRQ,IAAI,EAAE,kBAAkB;MACxBJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUY,UAAUA,CAAA,EAAG;EACrB,MAAMlB,UAAU,CAAC,gBAAgB,EAAEQ,KAAK,CAAC,CAAC,CAAC;AAC7C;;AAEA,UAAUW,WAAWA,CAAA,EAAG;EACtB,MAAMnB,UAAU,CAAC,iBAAiB,EAAEe,MAAM,CAAC;AAC7C;AACA,UAAUK,YAAYA,CAAA,EAAG;EACvB,MAAMpB,UAAU,CAAC,kBAAkB,EAAEiB,OAAO,CAAC;AAC/C;AACA;AACA;AACA;AACA;;AAEA,eAAe,UAAUI,QAAQA,CAAA,EAAG;EAClC,MAAMxB,GAAG,CAAC,CAACC,IAAI,CAACoB,UAAU,CAAC,EAAEpB,IAAI,CAACqB,WAAW,EAAErB,IAAI,CAACsB,YAAY,CAAC,CAAC,CAAC,CAAC;AACtE"},"metadata":{},"sourceType":"module"}
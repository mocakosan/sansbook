{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_OUT_REQUEST, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//SignUp\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n}\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//Follow\nfunction followAPI() {\n  return axios.post(\"/follow\");\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//UnFollow\nfunction unfollowAPI() {\n  return axios.post(\"/unfollow\");\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","LOG_OUT_REQUEST","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","result","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","console","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/user.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_REQUEST,\n  LOG_IN_REQUEST,\n  LOG_IN_FAILURE,\n  LOG_OUT_FAILURE,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  FOLLOW_FAILURE,\n  FOLLOW_REQUEST,\n  FOLLOW_SUCCESS,\n  UNFOLLOW_FAILURE,\n  UNFOLLOW_REQUEST,\n  UNFOLLOW_SUCCESS,\n} from \"../reducers/user\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//SignUp\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//Follow\nfunction followAPI() {\n  return axios.post(\"/follow\");\n}\n\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//UnFollow\nfunction unfollowAPI() {\n  return axios.post(\"/unfollow\");\n}\n\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n    fork(watchFollow),\n    fork(watchUnfollow),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
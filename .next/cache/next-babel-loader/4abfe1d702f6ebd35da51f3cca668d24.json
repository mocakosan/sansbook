{"ast":null,"code":"import { all, fork, take, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    const result = yield fork(logInAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield fork(logOutAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost(action) {\n  try {\n    const result = yield fork(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut, fork(watchAddPost))]);\n}","map":{"version":3,"names":["all","fork","take","call","put","axios","logInAPI","data","post","logIn","action","result","type","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/index.js"],"sourcesContent":["import { all, fork, take, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield fork(logInAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield fork(logOutAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\");\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield fork(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut, fork(watchAddPost))]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC/D,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAEA;AACA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACtB,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACvC;AAEA,UAAUE,KAAKA,CAACC,MAAM,EAAE;EACtB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMV,IAAI,CAACK,QAAQ,EAAEI,MAAM,CAACH,IAAI,CAAC;IAChD,MAAMH,GAAG,CAAC;MACR;MACAQ,IAAI,EAAE,gBAAgB;MACtBL,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMT,GAAG,CAAC;MACRQ,IAAI,EAAE,gBAAgB;MACtBL,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASQ,SAASA,CAAA,EAAG;EACnB,OAAOV,KAAK,CAACG,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAMA,CAAA,EAAG;EACjB,IAAI;IACF,MAAML,MAAM,GAAG,MAAMV,IAAI,CAACc,SAAS,CAAC;IACpC,MAAMX,GAAG,CAAC;MACR;MACAQ,IAAI,EAAE,iBAAiB;MACvBL,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMT,GAAG,CAAC;MACRQ,IAAI,EAAE,iBAAiB;MACvBL,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASU,UAAUA,CAACV,IAAI,EAAE;EACxB,OAAOF,KAAK,CAACG,IAAI,CAAC,WAAW,CAAC;AAChC;AAEA,UAAUU,OAAOA,CAACR,MAAM,EAAE;EACxB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMV,IAAI,CAACgB,UAAU,EAAEP,MAAM,CAACH,IAAI,CAAC;IAClD,MAAMH,GAAG,CAAC;MACR;MACAQ,IAAI,EAAE,kBAAkB;MACxBL,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMT,GAAG,CAAC;MACRQ,IAAI,EAAE,kBAAkB;MACxBL,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUY,UAAUA,CAAA,EAAG;EACrB,MAAMjB,IAAI,CAAC,gBAAgB,EAAEO,KAAK,CAAC,CAAC,CAAC;AACvC;;AAEA,UAAUW,WAAWA,CAAA,EAAG;EACtB,MAAMlB,IAAI,CAAC,iBAAiB,EAAEc,MAAM,CAAC;AACvC;AACA,UAAUK,YAAYA,CAAA,EAAG;EACvB,MAAMnB,IAAI,CAAC,kBAAkB,EAAEgB,OAAO,CAAC;AACzC;AAEA,eAAe,UAAUI,QAAQA,CAAA,EAAG;EAClC,MAAMtB,GAAG,CAAC,CAACC,IAAI,CAACkB,UAAU,CAAC,EAAElB,IAAI,CAACmB,WAAW,EAAEnB,IAAI,CAACoB,YAAY,CAAC,CAAC,CAAC,CAAC;AACtE"},"metadata":{},"sourceType":"module"}
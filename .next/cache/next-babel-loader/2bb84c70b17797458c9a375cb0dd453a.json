{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport { faker } from \"@faker-js/faker\";\nfaker.seed(123);\nexport const initialState = {\n  singlePost: null,\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\n\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\n// export const initialState = {\n//   mainPosts: [\n//     {\n//       id: 1,\n//       User: {\n//         id: 1,\n//         nickname: \"제로초\",\n//       },\n//       content: \"첫 번째 게시글 #해시태그 #jangsan\",\n//       Images: [\n//         {\n//           id: shortId.generate(),\n//           src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\n//         },\n//         {\n//           id: shortId.generate(),\n//           src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\n//         },\n//         {\n//           id: shortId.generate(),\n//           src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\n//         },\n//       ],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: \"nero\",\n//           },\n//           content: \"우와 개정판이 나왔군요~\",\n//         },\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: \"hero\",\n//           },\n//           content: \"얼른 사고싶어요~\",\n//         },\n//       ],\n//     },\n//   ],\n//   imagePaths: [],\n//   addPostLoading: false,\n//   addPostDone: false,\n//   addPostError: null,\n//   removePostLoading: false,\n//   removePostDone: false,\n//   removePostError: null,\n//   addCommentLoading: false,\n//   addCommentDone: false,\n//   addCommentError: null,\n// };\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommnet = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n// const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: \"제로초\",\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: shortId.generate(),\n//   content: data,\n//   User: {\n//     id: 1,\n//     nickname: \"제로초\",\n//   },\n// });\n\n//reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.userId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.userId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","seed","initialState","singlePost","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","retweetLoading","retweetDone","retweetError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addCommnet","reducer","state","action","draft","unshift","error","post","find","v","id","PostId","Likers","push","userId","filter","concat","length","i","Comments"],"sources":["/Users/js/Desktop/sansbook/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport { faker } from \"@faker-js/faker\";\nfaker.seed(123);\n\nexport const initialState = {\n  singlePost: null,\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n};\n\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\n// export const initialState = {\n//   mainPosts: [\n//     {\n//       id: 1,\n//       User: {\n//         id: 1,\n//         nickname: \"제로초\",\n//       },\n//       content: \"첫 번째 게시글 #해시태그 #jangsan\",\n//       Images: [\n//         {\n//           id: shortId.generate(),\n//           src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\n//         },\n//         {\n//           id: shortId.generate(),\n//           src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\n//         },\n//         {\n//           id: shortId.generate(),\n//           src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\n//         },\n//       ],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: \"nero\",\n//           },\n//           content: \"우와 개정판이 나왔군요~\",\n//         },\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: \"hero\",\n//           },\n//           content: \"얼른 사고싶어요~\",\n//         },\n//       ],\n//     },\n//   ],\n//   imagePaths: [],\n//   addPostLoading: false,\n//   addPostDone: false,\n//   addPostError: null,\n//   removePostLoading: false,\n//   removePostDone: false,\n//   removePostError: null,\n//   addCommentLoading: false,\n//   addCommentDone: false,\n//   addCommentError: null,\n// };\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addCommnet = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: \"제로초\",\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: shortId.generate(),\n//   content: data,\n//   User: {\n//     id: 1,\n//     nickname: \"제로초\",\n//   },\n// });\n\n//reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS: {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.userId });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.userId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS: {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
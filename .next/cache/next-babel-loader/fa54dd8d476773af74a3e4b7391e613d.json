{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_OF_ME } from \"../reducers/post\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","type","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_OF_ME,\n} from \"../reducers/post\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,SAAS,EACTC,UAAU,EACVC,IAAI,EACJC,GAAG,EACHC,KAAK,QACA,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,iBAAiB,QACZ,kBAAkB;;AAEzB;AACA;AACA;;AAEA;AACA,SAASC,UAAUA,CAACC,IAAI,EAAE;EACxB,OAAOT,KAAK,CAACU,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUE,OAAOA,CAACC,MAAM,EAAE;EACxB,IAAI;IACF;IACA,MAAMb,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACR;MACAe,IAAI,EAAEX,gBAAgB;MACtBO,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMhB,GAAG,CAAC;MACRe,IAAI,EAAEV,gBAAgB;MACtBM,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASO,aAAaA,CAACP,IAAI,EAAE;EAC3B,OAAOT,KAAK,CAACU,IAAI,CAAE,aAAYD,IAAI,CAACQ,MAAO,UAAS,EAAER,IAAI,CAAC;AAC7D;AAEA,UAAUS,UAAUA,CAACN,MAAM,EAAE;EAC3B,IAAI;IACF;IACA,MAAMb,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACR;MACAe,IAAI,EAAER,mBAAmB;MACzBI,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;IACF,MAAMX,GAAG,CAAC;MACRe,IAAI,EAAEN;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMhB,GAAG,CAAC;MACRe,IAAI,EAAEP,mBAAmB;MACzBG,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUU,YAAYA,CAAA,EAAG;EACvB,MAAMvB,UAAU,CAACK,gBAAgB,EAAEU,OAAO,CAAC;AAC7C;AACA,UAAUS,eAAeA,CAAA,EAAG;EAC1B,MAAMxB,UAAU,CAACQ,mBAAmB,EAAEc,UAAU,CAAC;AACnD;AACA;AACA;AACA;AACA;;AAEA,eAAe,UAAUG,QAAQA,CAAA,EAAG;EAClC,MAAM5B,GAAG,CAAC,CAACC,IAAI,CAACyB,YAAY,CAAC,EAAEzB,IAAI,CAAC0B,eAAe,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}
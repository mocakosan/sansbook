{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    //const result = yield fork(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","ADD_POST_TO_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield fork(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield fork(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield fork(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
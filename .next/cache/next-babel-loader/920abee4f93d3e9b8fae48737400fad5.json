{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #jangsan\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommnet = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\n//reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null\n        });\n      case ADD_POST_SUCCESS:\n        {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            mainPosts: [dummyPost(action.data), ...state.mainPosts],\n            addPostLoading: false,\n            addPostDone: true\n          });\n        }\n      case ADD_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostError: action.error\n        });\n      case REMOVE_POST_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null\n        });\n      case REMOVE_POST_SUCCESS:\n        {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n            removePostLoading: false,\n            removePostDone: true\n          });\n        }\n      case REMOVE_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: false,\n          removePostError: action.error\n        });\n      case ADD_COMMENT_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null\n        });\n      case ADD_COMMENT_SUCCESS:\n        {\n          const postIndex = state.mainPosts.findIndex(y => y.id === action.data.postId);\n          const post = _objectSpread({}, state.mainPosts[postIndex]);\n          post.comments = [dummyComment(action.data.content), ...post.Comments];\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post;\n          return _objectSpread(_objectSpread({}, state), {}, {\n            mainPosts,\n            addCommentLoading: false,\n            addCommentDone: true\n          });\n        }\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addCommnet","dummyPost","dummyComment","reducer","state","action","draft","_objectSpread","error","filter","v","postIndex","findIndex","y","postId","post","comments"],"sources":["/Users/js/Desktop/sansbook/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"제로초\",\n      },\n      content: \"첫 번째 게시글 #해시태그 #jangsan\",\n      Images: [\n        {\n          id: shortId.generate(),\n          src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\n        },\n        {\n          id: shortId.generate(),\n          src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"nero\",\n          },\n          content: \"우와 개정판이 나왔군요~\",\n        },\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"hero\",\n          },\n          content: \"얼른 사고싶어요~\",\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addCommnet = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\n//reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        return {\n          ...state,\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null,\n        };\n      case ADD_POST_SUCCESS: {\n        return {\n          ...state,\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          addPostLoading: false,\n          addPostDone: true,\n        };\n      }\n      case ADD_POST_FAILURE:\n        return {\n          ...state,\n          addPostLoading: false,\n          addPostError: action.error,\n        };\n      case REMOVE_POST_REQUEST:\n        return {\n          ...state,\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null,\n        };\n      case REMOVE_POST_SUCCESS: {\n        return {\n          ...state,\n          mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n          removePostLoading: false,\n          removePostDone: true,\n        };\n      }\n      case REMOVE_POST_FAILURE:\n        return {\n          ...state,\n          removePostLoading: false,\n          removePostError: action.error,\n        };\n      case ADD_COMMENT_REQUEST:\n        return {\n          ...state,\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null,\n        };\n      case ADD_COMMENT_SUCCESS: {\n        const postIndex = state.mainPosts.findIndex(\n          (y) => y.id === action.data.postId\n        );\n        const post = { ...state.mainPosts[postIndex] };\n        post.comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return {\n          ...state,\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true,\n        };\n      }\n      case ADD_COMMENT_FAILURE:\n        return {\n          ...state,\n          addCommentLoading: false,\n          addCommentError: action.error,\n        };\n      default: {\n        return {\n          ...state,\n        };\n      }\n    }\n  });\n};\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
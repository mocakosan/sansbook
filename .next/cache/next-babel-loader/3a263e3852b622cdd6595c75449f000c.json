{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\n//import shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LoadPost\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    //const result = yield fork(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","ADD_POST_TO_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","console","error","response","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\n//import shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LoadPost\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield fork(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
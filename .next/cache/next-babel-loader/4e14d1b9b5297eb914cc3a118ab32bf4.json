{"ast":null,"code":"import { all, fork, take, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\nfunction* logIn() {\n  try {\n    const result = yield fork(logInAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield fork(logOutAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost() {\n  try {\n    const result = yield fork(addPostAPI);\n    yield put({\n      //put : dispatch\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut, fork(watchAddPost))]);\n}","map":{"version":3,"names":["all","fork","take","call","put","axios","logInAPI","post","logIn","result","type","data","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/index.js"],"sourcesContent":["import { all, fork, take, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//LOGIN\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    const result = yield fork(logInAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n//LOGOUT\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield fork(logOutAPI);\n    yield put({\n      //put : dispatch\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* addPost() {\n  try {\n    const result = yield fork(addPostAPI);\n    yield put({\n      //put : dispatch\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn); //take(\"LOG_IN\") : 로그인이란 액션이 실행될때까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut, fork(watchAddPost))]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC/D,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAEA;AACA,SAASC,QAAQA,CAAA,EAAG;EAClB,OAAOD,KAAK,CAACE,IAAI,CAAC,YAAY,CAAC;AACjC;AAEA,UAAUC,KAAKA,CAAA,EAAG;EAChB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMR,IAAI,CAACK,QAAQ,CAAC;IACnC,MAAMF,GAAG,CAAC;MACR;MACAM,IAAI,EAAE,gBAAgB;MACtBC,IAAI,EAAEF,MAAM,CAACE;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMR,GAAG,CAAC;MACRM,IAAI,EAAE,gBAAgB;MACtBC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASG,SAASA,CAAA,EAAG;EACnB,OAAOT,KAAK,CAACE,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAMA,CAAA,EAAG;EACjB,IAAI;IACF,MAAMN,MAAM,GAAG,MAAMR,IAAI,CAACa,SAAS,CAAC;IACpC,MAAMV,GAAG,CAAC;MACR;MACAM,IAAI,EAAE,iBAAiB;MACvBC,IAAI,EAAEF,MAAM,CAACE;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMR,GAAG,CAAC;MACRM,IAAI,EAAE,iBAAiB;MACvBC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASK,UAAUA,CAAA,EAAG;EACpB,OAAOX,KAAK,CAACE,IAAI,CAAC,WAAW,CAAC;AAChC;AAEA,UAAUU,OAAOA,CAAA,EAAG;EAClB,IAAI;IACF,MAAMR,MAAM,GAAG,MAAMR,IAAI,CAACe,UAAU,CAAC;IACrC,MAAMZ,GAAG,CAAC;MACR;MACAM,IAAI,EAAE,kBAAkB;MACxBC,IAAI,EAAEF,MAAM,CAACE;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMR,GAAG,CAAC;MACRM,IAAI,EAAE,kBAAkB;MACxBC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUO,UAAUA,CAAA,EAAG;EACrB,MAAMhB,IAAI,CAAC,gBAAgB,EAAEM,KAAK,CAAC,CAAC,CAAC;AACvC;;AAEA,UAAUW,WAAWA,CAAA,EAAG;EACtB,MAAMjB,IAAI,CAAC,iBAAiB,EAAEa,MAAM,CAAC;AACvC;AACA,UAAUK,YAAYA,CAAA,EAAG;EACvB,MAAMlB,IAAI,CAAC,kBAAkB,EAAEe,OAAO,CAAC;AACzC;AAEA,eAAe,UAAUI,QAAQA,CAAA,EAAG;EAClC,MAAMrB,GAAG,CAAC,CAACC,IAAI,CAACiB,UAAU,CAAC,EAAEjB,IAAI,CAACkB,WAAW,EAAElB,IAAI,CAACmB,YAAY,CAAC,CAAC,CAAC,CAAC;AACtE"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\n//import shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//loadPost\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//LoadPosts\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//Upload images\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//LIKE\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//UNLIKE\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([fork(watchUnLikePost), fork(watchLikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment), fork(watchUploadImages)]);\n}","map":{"version":3,"names":["all","fork","takeEvery","takeLatest","call","put","delay","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","REMOVE_POST_OF_ME","ADD_POST_TO_ME","loadPostAPI","data","get","loadPost","action","result","type","err","console","error","response","loadPostsAPI","loadPosts","addPostAPI","post","addPost","id","uploadImagesAPI","uploadImages","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","watchUploadImages","watchLikePost","watchUnLikePost","watchLoadPost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/js/Desktop/sansbook/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeEvery,\n  takeLatest,\n  call,\n  put,\n  delay,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n} from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME, ADD_POST_TO_ME } from \"../reducers/user\";\n//import shortId from \"shortid\";\n\n//all 배열안에 있는것들을 한번에 실행\n//fork 비동기 함수 호출\n//call 동기 함수 호출\n\n//loadPost\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//LoadPosts\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put : dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//Upload images\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//RemovePost\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n\n    yield put({\n      //put : dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//AddCommnet\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      //put : dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//LIKE\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//UNLIKE\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n//yield take 단점 : 일회용\n//takeEvery로 while문 대체해서 반복하게 만듬\n//takeLatest 모르고 여러번 눌러도 마지막만 실행하게만듬 (중복 못하게, 보통은 takeLatest 많이함)\n//throttle 시간제한을 두고 그 시간안에는 한번만 실행\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchUnLikePost),\n    fork(watchLikePost),\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchUploadImages),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}